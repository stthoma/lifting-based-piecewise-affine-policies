#include "ParallelDataInstanceEvaluator.h"

namespace data_models {

template<class Parameter>
ParallelDataInstanceEvaluator<Parameter>::ParallelDataInstanceEvaluator(
        ParameterIterator<Parameter> & parameter_iterator,
        std::function<std::string (Parameter const&)> const& test,
        std::ostream& output_stream
) : _parameter_iterator(parameter_iterator), _test(test), _output_stream(output_stream) {}

template<class Parameter>
void ParallelDataInstanceEvaluator<Parameter>::thread_function() {
    while (true) {
        _increment_lock.lock();
        bool valid = _parameter_iterator.valid();
        Parameter const parameter = _parameter_iterator.get_parameter();
        _parameter_iterator.increment();
        _increment_lock.unlock();
        if (not valid){
            return;
        }
        std::string const result = _test(parameter);
        _output_lock.lock();
        _output_stream << result;
        _output_stream.flush();
        _output_lock.unlock();
    }
}

template<class Parameter>
void ParallelDataInstanceEvaluator<Parameter>::run_tests(size_t num_threads) {
    auto t = std::chrono::system_clock::now();
    std::vector<std::thread> threads;
    for (size_t i = 0; i < num_threads - 1; ++i) {
        threads.emplace_back(&ParallelDataInstanceEvaluator<Parameter>::thread_function, this);
    }
    thread_function();
    for (auto& thread: threads) {
        thread.join();
    }

    helpers::global_logger << "Test time: " + std::to_string(
            double(std::chrono::duration_cast<std::chrono::milliseconds>(
                    std::chrono::system_clock::now() - t).count()) / 1000) + "s";
}

}
